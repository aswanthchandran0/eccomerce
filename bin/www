#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ecommerse-website:server');
//var http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || process.env.PORT);
app.set('port', port);


/*  load ssl cetificate
*/ 
//const privateKey = fs.readFileSync(path.join(__dirname, 'bin/www/https-server/key.pem'), 'utf8');
//const certificate = fs.readFileSync(path.join(__dirname, 'bin/www/https-server/cert.pem'), 'utf8');
const privateKey = fs.readFileSync(path.join(__dirname, '..', 'https-server', 'key.pem'), 'utf8');
const certificate = fs.readFileSync(path.join(__dirname, '..', 'https-server', 'cert.pem'), 'utf8');

const credentials = { key: privateKey, cert: certificate };




/**
 * Create HTTP server.
 */

//var server = https.createServer(app)
const httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpsServer.listen(port);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
     // throw error;
     console.error('Error:', error);
      process.exit(1)
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

process.on('SIGINT', function() {
  console.log('Server shutting down gracefully...');
  httpsServer.close(function() {
    console.log('HTTPS server closed.');
    process.exit();
  });
});
